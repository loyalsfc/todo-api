// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todos.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addTodo = `-- name: AddTodo :one
INSERT INTO todos (
    id, title, description, is_completed
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, title, description, is_completed, created_at
`

type AddTodoParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	IsCompleted bool
}

func (q *Queries) AddTodo(ctx context.Context, arg AddTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, addTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.IsCompleted,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, description, is_completed, created_at FROM todos
WHERE id = $1
`

func (q *Queries) GetTodo(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.CreatedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, title, description, is_completed, created_at FROM todos
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsCompleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos 
    set title = $2,
    description = $3,
    is_completed = $4
WHERE id = $1
`

type UpdateTodoParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	IsCompleted bool
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.IsCompleted,
	)
	return err
}
